!function(t) {
    var i = "object" == typeof self && self.self === self && self || "object" == typeof global && global.global === global && global;
    "function" == typeof define && define.amd ? define([ "exports" ], function(s) {
        i.ParticleNetwork = t(i, s);
    }) : "object" == typeof module && module.exports ? module.exports = t(i, {}) : i.ParticleNetwork = t(i, {});
}(function(t, i) {
    var s = function(t) {
        this.canvas = t.canvas, this.ctx = t.ctx, this.particleColor = t.options.particleColor, 
        this.use_opacity = t.options.useOpacity, this.opacity_status, this.opacity_value = t.options.opacityValue * Math.random(), 
        this.opacity = Math.random(), this.opacity_min = t.options.opacityMin, this.change_size = t.options.changeSize, 
        this.size_status, this.radius = Math.random(), this.size_min = t.options.sizeMin, 
        this.size = t.options.size * Math.random(), this.x = Math.random() * this.canvas.width, 
        this.y = Math.random() * this.canvas.height, this.velocity = {
            x: (Math.random() - .5) * t.options.velocity,
            y: (Math.random() - .5) * t.options.velocity
        };
    };
    return s.prototype.update = function() {
        (this.x > this.canvas.width + 20 || this.x < -20) && (this.velocity.x = -this.velocity.x), 
        (this.y > this.canvas.height + 20 || this.y < -20) && (this.velocity.y = -this.velocity.y), 
        this.x += this.velocity.x, this.y += this.velocity.y, this.use_opacity && (1 == this.opacity_status ? (this.opacity >= this.opacity_value && (this.opacity_status = !1), 
        this.opacity += .002) : (this.opacity <= this.opacity_min && (this.opacity_status = !0), 
        this.opacity -= .002), this.opacity < 0 && (this.opacity = 0)), this.change_size && (1 == this.size_status ? (this.radius >= this.size && (this.size_status = !1), 
        this.radius += .02) : (this.radius <= this.size_min && (this.size_status = !0), 
        this.radius -= .02), this.radius < 0 && (this.radius = 0));
    }, s.prototype.draw = function() {
        this.ctx.beginPath(), this.ctx.fillStyle = function(t, i) {
            let s = !1, e = t.slice(t.startsWith("#") ? 1 : 0);
            3 === e.length ? e = [ ...e ].map(t => t + t).join("") : 8 === e.length && (s = !0);
            return `rgba(${(e = parseInt(e, 16)) >>> (s ? 24 : 16)}, ${(e & (s ? 16711680 : 65280)) >>> (s ? 16 : 8)}, ${(e & (s ? 65280 : 255)) >>> (s ? 8 : 0)}${s ? `, ${255 & e}` : ""}, ${i})`;
        }(this.particleColor, this.opacity), this.ctx.globalAlpha = .7, this.ctx.arc(this.x, this.y, this.radius, 0, 2 * Math.PI), 
        this.ctx.fill();
    }, (i = function(t, i) {
        this.canvasDiv = t, this.canvasDiv.size = {
            width: this.canvasDiv.offsetWidth,
            height: this.canvasDiv.offsetHeight
        }, i = void 0 !== i ? i : {}, this.options = {
            particleColor: void 0 !== i.particleColor ? i.particleColor : "#ffffff",
            background: void 0 !== i.background ? i.background : "#11ffee00",
            interactive: void 0 === i.interactive || i.interactive,
            velocity: this.setVelocity(i.speed),
            density: this.setDensity(i.density),
            opacityValue: void 0 !== i.opacityValue ? i.opacityValue : .989271537812009,
            opacityMin: void 0 !== i.opacityValue ? i.opacityValue : 0,
            useOpacity: void 0 !== i.useOpacity && i.useOpacity,
            changeSize: void 0 !== i.changeSize && i.changeSize,
            size: void 0 !== i.size ? i.size : 2.989271537812009,
            sizeMin: void 0 !== i.sizeMin ? i.sizeMin : 0
        }, this.init();
    }).prototype.init = function() {
        if (this.bgDiv = document.createElement("div"), this.canvasDiv.appendChild(this.bgDiv), 
        this.setStyles(this.bgDiv, {
            position: "absolute",
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            "z-index": 1
        }), /(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)/i.test(this.options.background)) this.setStyles(this.bgDiv, {
            background: this.options.background
        }); else {
            if (!/\.(gif|jpg|jpeg|tiff|png)$/i.test(this.options.background)) return console.error("Please specify a valid background image or hexadecimal color"), 
            !1;
            this.setStyles(this.bgDiv, {
                background: 'url("' + this.options.background + '") no-repeat center',
                "background-size": "cover"
            });
        }
        if (!/(^#[0-9A-F]{8}$)|(^#[0-9A-F]{6}$)/i.test(this.options.particleColor)) return console.error("Please specify a valid particleColor hexadecimal color"), 
        !1;
        this.canvas = document.createElement("canvas"), this.canvasDiv.appendChild(this.canvas), 
        this.ctx = this.canvas.getContext("2d");
        var t = this.canvasDiv.getBoundingClientRect();
        this.canvas.width = window.innerWidth - t.left, this.canvas.height = window.innerHeight - t.top, 
        this.setStyles(this.canvasDiv, {
            position: "absolute"
        }), this.setStyles(this.canvas, {
            "z-index": "20",
            position: "relative"
        }), window.addEventListener("resize", function() {
            if (this.canvasDiv.offsetWidth === this.canvasDiv.size.width && this.canvasDiv.offsetHeight === this.canvasDiv.size.height) return !1;
            this.canvas.width = this.canvasDiv.size.width = this.canvasDiv.offsetWidth, this.canvas.height = this.canvasDiv.size.height = this.canvasDiv.offsetHeight, 
            clearTimeout(this.resetTimer), this.resetTimer = setTimeout(function() {
                this.particles = [];
                for (var t = 0; t < this.canvas.width * this.canvas.height / this.options.density; t++) this.particles.push(new s(this));
                this.options.interactive && this.particles.push(this.mouseParticle), requestAnimationFrame(this.update.bind(this));
            }.bind(this), 500);
        }.bind(this)), this.particles = [];
        for (var i = 0; i < this.canvas.width * this.canvas.height / this.options.density; i++) this.particles.push(new s(this));
        this.options.interactive && (this.mouseParticle = new s(this), this.mouseParticle.velocity = {
            x: 0,
            y: 0
        }, this.particles.push(this.mouseParticle), this.canvas.addEventListener("mousemove", function(t) {
            var i = this.canvas.getBoundingClientRect();
            this.mouseParticle.x = t.clientX - i.left, this.mouseParticle.y = t.clientY - i.top;
        }.bind(this)), this.canvas.addEventListener("mouseup", function(t) {
            this.mouseParticle.velocity = {
                x: (Math.random() - .5) * this.options.velocity,
                y: (Math.random() - .5) * this.options.velocity
            }, this.mouseParticle = new s(this), this.mouseParticle.velocity = {
                x: 0,
                y: 0
            }, this.particles.push(this.mouseParticle);
        }.bind(this))), requestAnimationFrame(this.update.bind(this));
    }, i.prototype.update = function() {
        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height), this.ctx.globalAlpha = 1;
        for (var t = 0; t < this.particles.length; t++) {
            this.particles[t].update(), this.particles[t].draw();
            for (var i = this.particles.length - 1; i > t; i--) {
                var s = Math.sqrt(Math.pow(this.particles[t].x - this.particles[i].x, 2) + Math.pow(this.particles[t].y - this.particles[i].y, 2));
                s > 120 || (this.ctx.beginPath(), this.ctx.strokeStyle = this.options.particleColor, 
                this.ctx.globalAlpha = (120 - s) / 120, this.ctx.stroke());
            }
        }
        0 !== this.options.velocity && requestAnimationFrame(this.update.bind(this));
    }, i.prototype.setVelocity = function(t) {
        return "fast" === t ? 1 : "slow" === t ? .33 : "none" === t ? 0 : .66;
    }, i.prototype.setDensity = function(t) {
        return "high" === t ? 1e3 : "medium" === t ? 5e3 : "low" === t ? 2e4 : isNaN(parseInt(t, 10)) ? 1e4 : t;
    }, i.prototype.setStyles = function(t, i) {
        for (var s in i) t.style[s] = i[s];
    }, i;
});